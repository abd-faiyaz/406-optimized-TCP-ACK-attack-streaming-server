# docker/Dockerfile.server
FROM node:18-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY backend/package*.json ./backend/
COPY frontend/package*.json ./frontend/

# Install dependencies
RUN npm ci --only=production

# Copy source code
COPY backend ./backend
COPY frontend ./frontend

# Build applications
RUN cd backend && npm run build
RUN cd frontend && npm run build

# Production image
FROM node:18-alpine AS production

# Install system dependencies
RUN apk add --no-cache \
    ffmpeg \
    tcpdump \
    libpcap-dev \
    linux-headers

# Create app user
RUN addgroup -g 1001 -S appgroup && \
    adduser -S appuser -u 1001 -G appgroup

# Set working directory
WORKDIR /app

# Copy built applications
COPY --from=builder /app/backend/dist ./backend/dist
COPY --from=builder /app/frontend/build ./frontend/build
COPY --from=builder /app/node_modules ./node_modules

# Copy configuration
COPY config ./config
COPY scripts ./scripts

# Set permissions
RUN chown -R appuser:appgroup /app
RUN chmod +x scripts/*.sh

# Switch to non-root user
USER appuser

# Expose ports
EXPOSE 3001 8080 1935

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3001/health || exit 1

# Start application
CMD ["node", "backend/dist/app.js"]